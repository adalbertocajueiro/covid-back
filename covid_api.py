#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Classificação de Coronavírus Binário.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/164fuZk7Oe8AUFxoDQL7fEmH2Mmw-HH9z

Código baseado no post de Adrian Yijie Xu disponível em: https://towardsdatascience.com/detecting-covid-19-induced-pneumonia-from-chest-x-rays-with-transfer-learning-an-implementation-311484e6afc1

Código modificado e adaptado para uma API contendo as funcoes a serem usadas dentro de arquiteturas 
envolvendo bibliotecas e cliente/servidor.
Este codigo é para ser usado por qualquer cliente que necessite dos serviços da rede treinada, atraves
de um Singleton.
"""

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import numpy as np
import os
from covid_utils import test_dir,train_dir

# necessario por problemas de execucao com a biblioteca 
os.environ['KMP_DUPLICATE_LIB_OK']='True'

# diretorio contando os testes
# test_dir = '/Users/adalbertocajueiro/Downloads/two/test'
#test_dir = '/home/ubuntu/covid-data/two/test'

#carrega o modelo a partir de um arquivo salvo previamente
def load_model_from_file(path):
  model = load_model(path)
  model.summary()
  return model

def fileCount(folder):
    count = 0

    for filename in os.listdir(folder):
      path = os.path.join(folder, filename)
      if os.path.isfile(path):
        count += 1
      elif os.path.isdir(path):
        count += fileCount(path)
     
    return count

#executa os testes abseado em uma abteria de arquivos a serem analisados
#modificar adequadamente a pasta contendo os dados de tetes
def run_tests(model):
  
  img_size = (150, 150)
  test_datagen = ImageDataGenerator(rescale=1. / 255)
  test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=img_size,
    batch_size=1,
    shuffle=False,
    class_mode='binary')
  x = model.evaluate_generator(
    test_generator,
    steps = test_generator.n,
    verbose = 1
    )
  return x

#analisa uma imagem e responde (true or false) se ela é indicativa de covid ou nao
def is_covid(model, path):
  print('Analysing image ', path)
  img = image.load_img(path, target_size=(150, 150))
  x = image.img_to_array(img)/255.0
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images)
  
  if classes[0]>0.5:
    return False
  else:
    return True

#classe que encapsula um modelo (model) e implementa o singleton para permitir
# que apenas um ainstncia do modelo esteja ativa para julgar os casos
class ModelSingleton:
   __instance = None
   # model.h5 é o arquivo salvo mas pode ser qualquer outro que contenha o modelo
   # ex: um para modelo com raio-x, outro para modelo com tomografia, etc. 
   model = load_model_from_file('model.h5')
   test_data = run_tests(model)
   @staticmethod 
   def getInstance():
      """ Static access method. """
      if ModelSingleton.__instance == None:
         ModelSingleton()
      return ModelSingleton.__instance
   def __init__(self):
      """ Virtually private constructor. """
      if ModelSingleton.__instance != None:
         raise Exception("This class is a singleton!")
      else:
         ModelSingleton.__instance = self
